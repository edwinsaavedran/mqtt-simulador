# --- docker-compose.yml ---

# Especifica la versión de la sintaxis de Docker Compose
version: '3.8'

# Define los servicios (contenedores) que componen la aplicación
services:

  # --- Servicio para el Broker MQTT (Mosquitto) ---
  mqtt-broker:
    # Usa una imagen oficial de Eclipse Mosquitto
    image: eclipse-mosquitto:2
    # Nombre descriptivo para el contenedor
    container_name: mqtt-broker
    # Mapea los puertos del contenedor a tu máquina local
    # Puerto 1883 para MQTT estándar, 9001 para MQTT sobre WebSockets
    ports:
      - "1883:1883" 
      - "9001:9001"
    # Monta volúmenes para persistir la configuración y los datos del broker
    # Esto asegura que la configuración y los mensajes retenidos no se pierdan al reiniciar
    volumes:
      - ./mosquitto/config:/mosquitto/config # Mapea la carpeta de configuración local
      - ./mosquitto/data:/mosquitto/data     # Mapea la carpeta de datos
      - ./mosquitto/log:/mosquitto/log       # Mapea la carpeta de logs
    # Política de reinicio: reinicia el contenedor si se detiene, a menos que se detenga manualmente
    restart: unless-stopped

  # --- Servicio para el Publicador (Sensor simulado) ---
  
  #publisher:
    # Construye la imagen usando el Dockerfile en el directorio actual (.)
  #  build: .
  #  container_name: publisher
    # Define una dependencia: este servicio no iniciará hasta que 'mqtt-broker' esté listo
  #  depends_on:
  #    - mqtt-broker
    # Sobrescribe el CMD por defecto del Dockerfile para ejecutar el script específico del publisher
  #  command: "node publisher/publisher.js"
    # Política de reinicio: reinicia automáticamente si el contenedor falla
  #  restart: on-failure
  

  # --- CAMBIO: Renombrado a publisher-1 ---
  publisher-1:
    build: .
    # --- CAMBIO: Nombre del contenedor ---
    container_name: publisher-1
    depends_on:
      - mqtt-broker
    command: "node publisher/publisher.js"
    # --- NUEVO: Variables de entorno ---
    environment:
      - DEVICE_ID=sensor-001
    restart: on-failure

  # --- NUEVO: Servicio para el segundo Publisher ---
  publisher-2:
    build: . # Reutiliza la misma imagen que publisher-1
    container_name: publisher-2
    depends_on:
      - mqtt-broker
    command: "node publisher/publisher.js" # Ejecuta el mismo script
    environment:
      - DEVICE_ID=sensor-002 # ¡Le pasamos un ID diferente!
    restart: on-failure

  # --- Servicio para el Suscriptor UNICAST(Se adiciona un cambio para la escucha de un solo sensor) ---
  unicast-subscriber:
    build: . # Usa el mismo Dockerfile que el publisher
    container_name: unicast-subscriber
    depends_on:
      - mqtt-broker
    command: "node subscriber/unicast.js" # Ejecuta el script unicast
    # --- NUEVO (Opcional): Escucharemos solo al sensor-001 ---
    environment:
      - DEVICE_ID=sensor-001
    restart: on-failure

  # --- Servicio para el Suscriptor MULTICAST ---
  multicast-subscriber:
    build: .
    container_name: multicast-subscriber
    depends_on:
      - mqtt-broker
    command: "node subscriber/multicast.js" # Ejecuta el script multicast
    restart: on-failure

  # --- Servicio para el Suscriptor BROADCAST ---
  broadcast-subscriber:
    build: .
    container_name: broadcast-subscriber
    depends_on:
      - mqtt-broker
    command: "node subscriber/broadcast.js" # Ejecuta el script broadcast
    restart: on-failure

  # --- Servicio para el MONITOR de estado ---
  monitor:
    build: .
    container_name: monitor
    depends_on:
      - mqtt-broker
    command: "node subscriber/monitor.js" # Ejecuta el script monitor
    restart: on-failure

# --- NUEVO: Servicio para el Monitor Web (Frontend) ---
  web-monitor:
    # Usamos una imagen ligera de Nginx
    image: nginx:1.25-alpine 
    container_name: web-monitor
    # Mapea el puerto 80 del contenedor Nginx al puerto 8080 de tu máquina
    ports:
      - "8080:80"
    # Monta el contenido de nuestra carpeta ./web-monitor
    # en el directorio donde Nginx sirve los archivos por defecto
    volumes:
      - ./web-monitor:/usr/share/nginx/html:ro # :ro significa solo lectura
    # Depende del broker solo para asegurar un orden de inicio, aunque no se conecta directamente
    depends_on:
      - mqtt-broker
    restart: unless-stopped

# --- (Opcional) Definición de redes ---
# Por defecto, Docker Compose crea una red 'default' para todos los servicios,
# permitiendo que se comuniquen usando sus nombres de servicio (ej. 'mqtt-broker').
# Si necesitas configuraciones de red más complejas, las definirías aquí.
# networks:
#   mi_red_mqtt: